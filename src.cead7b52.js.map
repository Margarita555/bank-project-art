{"version":3,"sources":["js/api-service.js","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","js/calculation.js","index.js"],"names":["API_KEY","Client","constructor","clients","fetchCurrencyRates","fetch","then","response","json","rate","data","length","error","urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","LN2","step","size","id","j","customAlphabet","nanoid","byte","toString","toUpperCase","form","document","querySelector","debitForm","creditForm","totalFundsBtn","totalFunds","apiService","ApiService","bank","addEventListener","onFormSubmit","onDebitFormSubmit","onCreditFormSubmit","countBankCashTotal","bankContainer","createClientMarkup","name","isActive","registrationDate","createDebitMarkup","debitAccount","map","balance","activity","currency","cardExpiryDate","join","event","preventDefault","formElements","currentTarget","elements","value","date","client","accounts","debit","credit","push","clientMarkup","insertAdjacentHTML","reset","activityDate","find","clientIndex","indexOf","accountsContainer","getElementById","console","debitMarkup","personalFunds","creditFunds","creditAccount","creditLimit","exchangeCurrency","rates","debitTotal","i","account","funds","creditTotal","total","innerText","toFixed","e","text","countClientsDebt","debtTotal","debt","exchangedDebt","countInactiveClientsDebtFunds","countInactiveDebtHolders","counter","countActiveDebtHolders"],"mappings":"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","file":"src.cead7b52.js","sourceRoot":"../src","sourcesContent":["const API_KEY = '7c8bbc90-8fcc-11ec-afa3-bfe597d9e008';\n\nexport default class Client {\n  constructor() {\n    this.clients = [];\n  }\n  fetchCurrencyRates() {\n    return fetch(`https://freecurrencyapi.net/api/v2/latest?apikey=${API_KEY}`)\n      .then(response => {\n        return response.json();\n      })\n      .then(rate => {\n        if (rate.data.length === 0) {\n          return error;\n        } else {\n          //   console.log(rate.data);\n          return rate.data;\n        }\n      });\n  }\n\n  //   get query() {\n  //     return this.searchQuery;\n  //   }\n\n  //   set query(newQuery) {\n  //     this.searchQuery = newQuery;\n  //   }\n\n  //   in() {\n  //     this.page += 1;\n  //   }\n}\n\n// async function fetchCurrencyRates() {\n//   return await fetch(`https://freecurrencyapi.net/api/v2/latest?apikey=${API_KEY}`)\n//     .then(response => {\n//       return response.json();\n//     })\n//     .then(rate => {\n//       if (rate.data.length === 0) {\n//         return error;\n//       } else {\n//         //   console.log(rate.data);\n//         return rate.data;\n//       }\n//     });\n// }\n// console.log(fetchCurrencyRates());\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import ApiService from './api-service';\nimport { nanoid } from 'nanoid';\n// import bank from './db';\n// console.log(bank);\nconst form = document.querySelector('.form');\nconst debitForm = document.querySelector('.debitForm');\nconst creditForm = document.querySelector('.creditForm');\nconst totalFundsBtn = document.querySelector('#totalFunds');\nconst totalFunds = document.querySelector('.totalFunds');\n\n// console.log(form, debitForm, creditForm);\n\nconst apiService = new ApiService();\n// console.log(apiService.fetchCurrencyRates());\n// console.log(apiService.clients);\nconst bank = apiService.clients;\n\nform.addEventListener('submit', onFormSubmit);\ndebitForm.addEventListener('submit', onDebitFormSubmit);\ncreditForm.addEventListener('submit', onCreditFormSubmit);\ntotalFundsBtn.addEventListener('click', countBankCashTotal);\n\nconst bankContainer = document.querySelector('.bankContainer');\nfunction createClientMarkup(bank) {\n  const { id, name, isActive, registrationDate } = bank\n  \n    return (`\n    <li class=\"client\">\n    <p class=\"id\">Id: ${id}</p>\n    <p class=\"name\">Name: ${name}</p>\n    <p class=\"isActive\">Active: ${isActive}</p>\n    <p class=\"registrationDate\">Date of registration: ${registrationDate}</p>\n    <h3 class=\"accounts\">Accounts</h3>\n    <ul class=\"accountsContainer\" id=\"${id}\"></ul>\n</li>\n    `);\n//   return bank.map(({ id, name,isActive,registrationDate }) => {\n//     return `\n//     <li class=\"client\">\n//     <p class=\"id\">Id: ${id}</p>\n//     <p class=\"name\">Name: ${name}</p>\n//     <p class=\"isActive\">Active: ${isActive}</p>\n//     <p class=\"registrationDate\">Date of registration: ${registrationDate}</p>\n//     <h3 class=\"accounts\">Accounts</h3>\n//     <ul class=\"accountsContainer\" id=\"${id}\"></ul>\n// </li>\n//     `}).join(''); \n}\n\nfunction createDebitMarkup(debitAccount) {\n  return debitAccount.map(({ balance, activity, currency,registrationDate,cardExpiryDate }) => {\n    return `\n    <li class=\"client\">\n    <h4>Debit account</h4>\n    <p class=\"balance\">Balance: ${balance}</p>\n    <p class=\"activity\">Activity: ${activity}</p>\n    <p class=\"currency\">Currency: ${currency}</p>\n    <p class=\"activityDate\">Activity date: ${registrationDate}</p>\n    <p class=\"cardExpiryDate\">Card expiry date: ${cardExpiryDate}<p>\n</li>\n    `}).join(''); \n}\n\n// function createCreditMarkup(debitAccount) {\n//   return creditAccount.map(({ balance, activity, currency,registrationDate,cardExpiryDate }) => {\n//     return `\n//     <li class=\"client\">\n//     <h4>Debit account</h4>\n//     <p class=\"balance\">Balance: ${balance}</p>\n//     <p class=\"activity\">Activity: ${activity}</p>\n//     <p class=\"currency\">Currency: ${currency}</p>\n//     <p class=\"activityDate\">Activity date: ${registrationDate}</p>\n//     <p class=\"cardExpiryDate\">Card expiry date: ${cardExpiryDate}<p>\n// </li>\n//     `}).join(''); \n// }\n\nfunction onFormSubmit(event){\n  event.preventDefault();\n  const formElements = event.currentTarget.elements;\n  const name = formElements.name.value;\n  const registrationDate = formElements.date.value;\n  const isActive = formElements.isActive.value;\n\n  const client = {\n    // id: 123,\n    id: nanoid(),\n    name,\n    registrationDate,\n    isActive,\n    accounts: {\n            debit: [],\n            credit: [],\n          }\n  };\n  bank.push(client)\n\n  const clientMarkup = createClientMarkup(client);\nbankContainer.insertAdjacentHTML('beforeend', clientMarkup);\nform.reset();\n  // console.log(client);\n  // console.log(bank);\n}\n\nfunction onDebitFormSubmit(event){\n  event.preventDefault();\n  const formElements = event.currentTarget.elements;\n  \n  const id = formElements.id.value;\n  const balance = formElements.balance.value;\n  const activity = formElements.activity.value;\n  const activityDate = formElements.activityDate.value;\n  const cardExpiryDate = formElements.cardExpiryDate.value;\n  const currency = formElements.currency.value;\n \n  const debitAccount = {\n                balance,\n                activity,\n                activityDate,\n                cardExpiryDate,\n                currency,\n  };\n \n  const client = bank.find(client => id == client.id );\n  const clientIndex = bank.indexOf(client); \n \n  bank[clientIndex].accounts.debit.push(debitAccount);\n  // console.log(client);\n  // console.log(bank);\n  const accountsContainer = document.getElementById(`${id}`);\n  console.log(accountsContainer);\n  const debitMarkup = createDebitMarkup(bank[clientIndex].accounts.debit);\n  accountsContainer.insertAdjacentHTML('beforeend', debitMarkup);\n\n  debitForm.reset();\n}\n\nfunction onCreditFormSubmit(event){\n  event.preventDefault();\n  const formElements = event.currentTarget.elements;\n  \n  const id = formElements.id.value;\n  const personalFunds = formElements.balance.value;\n  const creditFunds = formElements.balance.value;\n  const activity = formElements.activity.value;\n  const activityDate = formElements.activityDate.value;\n  const cardExpiryDate = formElements.cardExpiryDate.value;\n  const currency = formElements.currency.value;\n  const creditLimit = formElements.creditLimit.value;\n \n  const creditAccount = {\n                balance: {\n                  personalFunds,\n                  creditFunds,\n                },\n                creditLimit,\n                activity,\n                activityDate,\n                cardExpiryDate,\n                currency,\n  };\n \n  \n  const client = bank.find(client => id == client.id );\n  const clientIndex = bank.indexOf(client); \n \n  bank[clientIndex].accounts.credit.push(creditAccount);\n  // console.log(client);\n  // console.log(bank);\n\n  const accountsContainer = document.getElementById(`${id}`);\n  console.log(accountsContainer);\n  // const creditMarkup = createDebitMarkup(bank[clientIndex].accounts.credit);\n  // accountsContainer.insertAdjacentHTML('beforeend', debitMarkup);\n  creditForm.reset();\n}\n// const bank = [\n//   {\n//     id: 123456789,\n//     name: 'Voyskaya Vlada Vladimirovna',\n//     isActive: true,\n//     registrationDate: '',\n//     accounts: {\n//       debit: [\n//         {\n//           balance: 5,\n//           activity: 2,\n//           activityDate: '',\n//           cardExpiryDate: '',\n//           currency: 'UAH',\n//         },\n//         {\n//           balance: 3,\n//           activity: 1,\n//           activityDate: '',\n//           cardExpiryDate: '',\n//           currency: 'UAH',\n//         },\n//       ],\n//       credit: [\n//         {\n//           balance: {\n//             personalFunds: 6,\n//             creditFunds: 5,\n//           },\n//           creditLimit: 10,\n//           activity: 3,\n//           activityDate: '',\n//           cardExpiryDate: '',\n//           currency: 'UAH',\n//         },\n//       ],\n//     },\n//   },\n//   {\n//     id: 123456790,\n//     name: 'Voyskiy Vlad Vladimirovich',\n//     isActive: false,\n//     registrationDate: '',\n//     accounts: {\n//       debit: [\n//         {\n//           balance: 7,\n//           activity: 3,\n//           activityDate: '',\n//           cardExpiryDate: '',\n//           currency: 'UAH',\n//         },\n//       ],\n//       credit: [\n//         {\n//           balance: {\n//             personalFunds: 2,\n//             creditFunds: 3,\n//           },\n//           creditLimit: 10,\n//           activity: 2,\n//           activityDate: '',\n//           cardExpiryDate: '',\n//           currency: 'UAH',\n//         },\n//         {\n//           balance: {\n//             personalFunds: 2,\n//             creditFunds: 3,\n//           },\n//           creditLimit: 10,\n//           activity: 2,\n//           activityDate: '',\n//           cardExpiryDate: '',\n//           currency: 'UAH',\n//         },\n//       ],\n//     },\n//   },\n// ];\n\n// function onTotalfundsClick(){\n//   c\n// }\n\n\nasync function exchangeCurrency(balance, currency) {\n  //   console.log(currency, balance);\n  const rate = await apiService.fetchCurrencyRates().then(rates => {\n    // console.log(rates.UAH);\n    return rates[currency];\n  });\n\n  return (balance / 100) * rate;\n  //    console.log(rate)\n}\n// exchangeCurrency(50, 'UAH')\n\nasync function countBankCashTotal() {\n  try {\n    let debitTotal = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.debit.length; j++) {\n        let account = bank[i].accounts.debit[j];\n\n        const funds = account.balance + account.activity;\n        let currency = account.currency;\n        //  console.log(currency)\n        if (currency === 'USD') {\n          debitTotal += funds;\n        } else {\n          const exchangedFunds = await exchangeCurrency(funds, currency);\n          //  console.log(exchangedFunds)\n          debitTotal += exchangedFunds;\n        }\n        // console.log(currency, balance)\n      }\n\n    }\n    // console.log(debitTotal);\n    let creditTotal = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n        let account = bank[i].accounts.credit[j];\n        //  console.log(account.balance)\n        const funds =\n          account.balance.personalFunds +\n          account.balance.creditFunds +\n          account.creditLimit +\n          account.activity;\n        let currency = account.currency;\n        // console.log(funds)\n        if (currency === 'USD') {\n          creditTotal += funds;\n        } else {\n          const exchangedFunds = await exchangeCurrency(funds, currency);\n          // console.log(exchangedFunds)\n          creditTotal += exchangedFunds;\n        }\n        // console.log(currency, balance)\n      }\n    }\n    // console.log(creditTotal);\n    console.log(debitTotal + creditTotal);\n    const total = debitTotal + creditTotal;\n    totalFunds.innerText = total.toFixed(2)\n\n    return debitTotal + creditTotal;\n  } catch (e) {\n    error({ text: 'Error.Try again leter.' });\n  }\n}\ncountBankCashTotal();\n\nasync function countClientsDebt() {\n  try {\n    let debtTotal = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n        let account = bank[i].accounts.credit[j];\n        //  console.log(account.balance)\n        let debt = 0;\n        // console.log(account)\n        if (account.balance.creditFunds > account.balance.personalFunds) {\n          debt = account.balance.creditFunds - account.balance.personalFunds;\n        }\n        // const funds = account.balance.personalFunds + account.balance.creditFunds + account.creditLimit + account.activity;\n        let currency = account.currency;\n        console.log(debt);\n        if (currency === 'USD') {\n          debtTotal += debt;\n        } else {\n          const exchangedDebt = await exchangeCurrency(debt, currency);\n          console.log(exchangedDebt);\n          debtTotal += exchangedDebt;\n        }\n        // console.log(currency, balance)\n      }\n    }\n    console.log(debtTotal);\n    return debtTotal;\n  } catch (e) {\n    error({ text: 'Error.Try again leter.' });\n  }\n}\ncountClientsDebt();\n\nasync function countInactiveClientsDebtFunds() {\n  try {\n    const total = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n        let account = bank[i].accounts.credit[j];\n        let debt = 0;\n        //  console.log(account.balance)\n        if (account.balance.creditFunds > account.balance.personalFunds) {\n          debt += account.balance.creditFunds - account.balance.personalFunds;\n          let currency = account.currency;\n          console.log(debt);\n          if (currency === 'USD') {\n            total += debt;\n          } else {\n            const exchangedDebt = await exchangeCurrency(debt, currency);\n            console.log(exchangedDebt);\n            // total += exchangedDebt\n          }\n        }\n      }\n    }\n    //   for (let i = 0; i < bank.length; i++) {\n    //     if(bank[i].isActive){\n    //       console.log('active')\n    //     //  break;\n    //     }\n    //     for(let j = 0; j < bank[i].accounts.credit.length; j++){\n    //      let account = bank[i].accounts.credit[j];\n    //       let debt = 0;\n    //       if(account.balance.creditFunds > account.balance.personalFunds){\n    //           debt += account.balance.creditFunds - account.balance.personalFunds;\n    //           let currency = account.currency;\n    //       console.log(debt)\n    //       if(currency === \"USD\"){\n    //         total += debt;\n    //       } else {\n    //       const exchangedDebt = await exchangeCurrency(debt, currency);\n    //       console.log(exchangedDebt)\n    //       total += exchangedDebt;\n\n    //       }\n    //     }\n    //  }\n    // }\n    // const creditFundsTotal = bank\n    //   .reduce(async (total, client) => {\n    //     let creditFunds = client.accounts.credit.balance.creditFunds;\n    //     const currency = client.accounts.credit.currency;\n    //     const exchangedCreditFunds = await exchangeCurrency(\n    //       creditFunds,\n    //       currency\n    //     );\n    //     total += exchangedCreditFunds;\n    //     return total;\n    //   }, 0)\n    //   .then((total) => console.log(total));\n\n    console.log(total);\n    return total;\n  } catch (e) {\n    error({ text: 'Error.Try again leter.' });\n  }\n}\ncountInactiveClientsDebtFunds();\n\nfunction countInactiveDebtHolders() {\n  // const inactiveClients = bank.filter((client) => {\n  //   return client.isActive && client.accounts.credit.balance.creditFunds !== 0;\n  // }).length;\n  let counter = 0;\n  for (let i = 0; i < bank.length; i++) {\n    let debt = false;\n    for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n      let account = bank[i].accounts.credit[j];\n      if (account.balance.creditFunds > account.balance.personalFunds) {\n        debt = true;\n        break;\n      }\n    }\n    if (debt && !bank[i].isActive) {\n      counter += 1;\n      debt = false;\n    }\n  }\n  console.log(counter);\n  return counter;\n}\n// countInactiveDebtHolders();\n\nfunction countActiveDebtHolders() {\n  let counter = 0;\n  for (let i = 0; i < bank.length; i++) {\n    let debt = false;\n    for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n      let account = bank[i].accounts.credit[j];\n      if (account.balance.creditFunds > account.balance.personalFunds) {\n        debt = true;\n        break;\n      }\n    }\n    if (debt && bank[i].isActive) {\n      counter += 1;\n      debt = false;\n    }\n  }\n  console.log(counter);\n  return counter;\n}\n// countActiveDebtHolders()\n","import './sass/main.scss';\nimport './js/calculation';\n"]}