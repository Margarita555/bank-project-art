{"version":3,"sources":["js/api-service.js","js/calculation.js","index.js"],"names":["API_KEY","Client","constructor","amount","fetchCurrencyRates","fetch","then","response","json","rate","data","length","error","bank","id","name","isActive","registrationDate","accounts","debit","balance","activity","activityDate","cardExpiryDate","currency","credit","personalFunds","creditFunds","creditLimit","apiService","ApiService","exchangeCurrency","rates","countBankCashTotal","debitTotal","i","j","account","funds","console","log","creditTotal","e","text","countClientsDebt","debtTotal","debt","exchangedDebt","countInactiveClientsDebtFunds","total","countInactiveDebtHolders","counter","countActiveDebtHolders"],"mappings":"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","file":"src.aa4b43b0.js","sourceRoot":"../src","sourcesContent":["const API_KEY = '7c8bbc90-8fcc-11ec-afa3-bfe597d9e008';\n\nexport default class Client {\n  constructor() {\n    this.amount = 0;\n  }\n  fetchCurrencyRates() {\n    return fetch(`https://freecurrencyapi.net/api/v2/latest?apikey=${API_KEY}`)\n      .then(response => {\n        return response.json();\n      })\n      .then(rate => {\n        if (rate.data.length === 0) {\n          return error;\n        } else {\n          //   console.log(rate.data);\n          return rate.data;\n        }\n      });\n  }\n\n  //   get query() {\n  //     return this.searchQuery;\n  //   }\n\n  //   set query(newQuery) {\n  //     this.searchQuery = newQuery;\n  //   }\n\n  //   in() {\n  //     this.page += 1;\n  //   }\n}\n\n// async function fetchCurrencyRates() {\n//   return await fetch(`https://freecurrencyapi.net/api/v2/latest?apikey=${API_KEY}`)\n//     .then(response => {\n//       return response.json();\n//     })\n//     .then(rate => {\n//       if (rate.data.length === 0) {\n//         return error;\n//       } else {\n//         //   console.log(rate.data);\n//         return rate.data;\n//       }\n//     });\n// }\n// console.log(fetchCurrencyRates());\n","import ApiService from './api-service';\n// import bank from './db';\n// console.log(bank);\nconst bank = [\n  {\n    id: 123456789,\n    name: 'Voyskaya Vlada Vladimirovna',\n    isActive: true,\n    registrationDate: '',\n    accounts: {\n      debit: [\n        {\n          balance: 5,\n          activity: 2,\n          activityDate: '',\n          cardExpiryDate: '',\n          currency: 'UAH',\n        },\n        {\n          balance: 3,\n          activity: 1,\n          activityDate: '',\n          cardExpiryDate: '',\n          currency: 'UAH',\n        },\n      ],\n      credit: [\n        {\n          balance: {\n            personalFunds: 6,\n            creditFunds: 5,\n          },\n          creditLimit: 10,\n          activity: 3,\n          activityDate: '',\n          cardExpiryDate: '',\n          currency: 'UAH',\n        },\n      ],\n    },\n  },\n  {\n    id: 123456790,\n    name: 'Voyskiy Vlad Vladimirovich',\n    isActive: false,\n    registrationDate: '',\n    accounts: {\n      debit: [\n        {\n          balance: 7,\n          activity: 3,\n          activityDate: '',\n          cardExpiryDate: '',\n          currency: 'UAH',\n        },\n      ],\n      credit: [\n        {\n          balance: {\n            personalFunds: 2,\n            creditFunds: 3,\n          },\n          creditLimit: 10,\n          activity: 2,\n          activityDate: '',\n          cardExpiryDate: '',\n          currency: 'UAH',\n        },\n        {\n          balance: {\n            personalFunds: 2,\n            creditFunds: 3,\n          },\n          creditLimit: 10,\n          activity: 2,\n          activityDate: '',\n          cardExpiryDate: '',\n          currency: 'UAH',\n        },\n      ],\n    },\n  },\n];\n\nconst apiService = new ApiService();\nconsole.log(apiService.fetchCurrencyRates());\n\nasync function exchangeCurrency(balance, currency) {\n  //   console.log(currency, balance);\n  const rate = await apiService.fetchCurrencyRates().then(rates => {\n    // console.log(rates.UAH);\n    return rates[currency];\n  });\n\n  return (balance / 100) * rate;\n  //    console.log(rate)\n}\n// exchangeCurrency(50, 'UAH')\n\nasync function countBankCashTotal() {\n  try {\n    let debitTotal = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.debit.length; j++) {\n        let account = bank[i].accounts.debit[j];\n\n        const funds = account.balance + account.activity;\n        let currency = account.currency;\n        //  console.log(currency)\n        if (currency === 'USD') {\n          debitTotal += funds;\n        } else {\n          const exchangedFunds = await exchangeCurrency(funds, currency);\n          //  console.log(exchangedFunds)\n          debitTotal += exchangedFunds;\n        }\n        // console.log(currency, balance)\n      }\n    }\n    console.log(debitTotal);\n    let creditTotal = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n        let account = bank[i].accounts.credit[j];\n        //  console.log(account.balance)\n        const funds =\n          account.balance.personalFunds +\n          account.balance.creditFunds +\n          account.creditLimit +\n          account.activity;\n        let currency = account.currency;\n        // console.log(funds)\n        if (currency === 'USD') {\n          creditTotal += funds;\n        } else {\n          const exchangedFunds = await exchangeCurrency(funds, currency);\n          // console.log(exchangedFunds)\n          creditTotal += exchangedFunds;\n        }\n        // console.log(currency, balance)\n      }\n    }\n    console.log(creditTotal);\n    console.log(debitTotal + creditTotal);\n    return debitTotal + creditTotal;\n  } catch (e) {\n    error({ text: 'Error.Try again leter.' });\n  }\n}\ncountBankCashTotal();\n\nasync function countClientsDebt() {\n  try {\n    let debtTotal = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n        let account = bank[i].accounts.credit[j];\n        //  console.log(account.balance)\n        let debt = 0;\n        // console.log(account)\n        if (account.balance.creditFunds > account.balance.personalFunds) {\n          debt = account.balance.creditFunds - account.balance.personalFunds;\n        }\n        // const funds = account.balance.personalFunds + account.balance.creditFunds + account.creditLimit + account.activity;\n        let currency = account.currency;\n        console.log(debt);\n        if (currency === 'USD') {\n          debtTotal += debt;\n        } else {\n          const exchangedDebt = await exchangeCurrency(debt, currency);\n          console.log(exchangedDebt);\n          debtTotal += exchangedDebt;\n        }\n        // console.log(currency, balance)\n      }\n    }\n    console.log(debtTotal);\n    return debtTotal;\n  } catch (e) {\n    error({ text: 'Error.Try again leter.' });\n  }\n}\ncountClientsDebt();\n\nasync function countInactiveClientsDebtFunds() {\n  try {\n    const total = 0;\n    for (let i = 0; i < bank.length; i++) {\n      for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n        let account = bank[i].accounts.credit[j];\n        let debt = 0;\n        //  console.log(account.balance)\n        if (account.balance.creditFunds > account.balance.personalFunds) {\n          debt += account.balance.creditFunds - account.balance.personalFunds;\n          let currency = account.currency;\n          console.log(debt);\n          if (currency === 'USD') {\n            total += debt;\n          } else {\n            const exchangedDebt = await exchangeCurrency(debt, currency);\n            console.log(exchangedDebt);\n            // total += exchangedDebt\n          }\n        }\n      }\n    }\n    //   for (let i = 0; i < bank.length; i++) {\n    //     if(bank[i].isActive){\n    //       console.log('active')\n    //     //  break;\n    //     }\n    //     for(let j = 0; j < bank[i].accounts.credit.length; j++){\n    //      let account = bank[i].accounts.credit[j];\n    //       let debt = 0;\n    //       if(account.balance.creditFunds > account.balance.personalFunds){\n    //           debt += account.balance.creditFunds - account.balance.personalFunds;\n    //           let currency = account.currency;\n    //       console.log(debt)\n    //       if(currency === \"USD\"){\n    //         total += debt;\n    //       } else {\n    //       const exchangedDebt = await exchangeCurrency(debt, currency);\n    //       console.log(exchangedDebt)\n    //       total += exchangedDebt;\n\n    //       }\n    //     }\n    //  }\n    // }\n    // const creditFundsTotal = bank\n    //   .reduce(async (total, client) => {\n    //     let creditFunds = client.accounts.credit.balance.creditFunds;\n    //     const currency = client.accounts.credit.currency;\n    //     const exchangedCreditFunds = await exchangeCurrency(\n    //       creditFunds,\n    //       currency\n    //     );\n    //     total += exchangedCreditFunds;\n    //     return total;\n    //   }, 0)\n    //   .then((total) => console.log(total));\n\n    console.log(total);\n    return total;\n  } catch (e) {\n    error({ text: 'Error.Try again leter.' });\n  }\n}\ncountInactiveClientsDebtFunds();\n\nfunction countInactiveDebtHolders() {\n  // const inactiveClients = bank.filter((client) => {\n  //   return client.isActive && client.accounts.credit.balance.creditFunds !== 0;\n  // }).length;\n  let counter = 0;\n  for (let i = 0; i < bank.length; i++) {\n    let debt = false;\n    for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n      let account = bank[i].accounts.credit[j];\n      if (account.balance.creditFunds > account.balance.personalFunds) {\n        debt = true;\n        break;\n      }\n    }\n    if (debt && !bank[i].isActive) {\n      counter += 1;\n      debt = false;\n    }\n  }\n  console.log(counter);\n  return counter;\n}\n// countInactiveDebtHolders();\n\nfunction countActiveDebtHolders() {\n  let counter = 0;\n  for (let i = 0; i < bank.length; i++) {\n    let debt = false;\n    for (let j = 0; j < bank[i].accounts.credit.length; j++) {\n      let account = bank[i].accounts.credit[j];\n      if (account.balance.creditFunds > account.balance.personalFunds) {\n        debt = true;\n        break;\n      }\n    }\n    if (debt && bank[i].isActive) {\n      counter += 1;\n      debt = false;\n    }\n  }\n  console.log(counter);\n  return counter;\n}\n// countActiveDebtHolders()\n","import './sass/main.scss';\nimport './js/calculation';\n"]}